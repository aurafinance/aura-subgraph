interface RewardData {
  token: Token!

  """
  Timestamp for current period finish
  """
  periodFinish: Int!

  """
  Last time any user took action
  """
  lastUpdateTime: Int!

  """
  RewardRate for the rest of the period
  """
  rewardRate: BigInt!

  """
  Ever increasing rewardPerToken rate, based on % of total supply
  """
  rewardPerTokenStored: BigInt!
}

type Account @entity {
  """
  Address
  """
  id: ID!

  poolAccounts: [PoolAccount!]! @derivedFrom(field: "account")

  auraLockerAccount: AuraLockerAccount

  merkleDropClaims: [MerkleDropClaim!]! @derivedFrom(field: "account")
}

type AuraLockerAccount @entity {
  """
  {Account.id}
  """
  id: ID!

  account: Account!

  auraLocker: AuraLocker!

  balance: BigInt!

  """
  Either self-delegated (in which case delegate => this, or another account); or not set
  """
  delegate: AuraLockerAccount

  """
  Timestamp at which `delegate` was updated
  """
  delegateUpdatedAt: Int

  """
  Accounts delegating to this account
  """
  delegators: [AuraLockerAccount!]! @derivedFrom(field: "delegate")

  """
  AuraLocker.balances(account)
  """
  balanceLocked: BigInt!
  balanceNextUnlockIndex: Int!

  """
  AuraLocker.userLocks(account)
  """
  userLocks: [AuraLockerUserLock!]! @derivedFrom(field: "auraLockerAccount")

  """
  AuraLocker.userData(account)
  """
  userData: [AuraLockerUserData!]! @derivedFrom(field: "auraLockerAccount")
}

type AuraLockerUserLock @entity {
  """
  {AuraLockerAccount.id}.{index}
  """
  id: ID!

  auraLockerAccount: AuraLockerAccount!

  amount: BigInt!

  unlockTime: Int!
}

type AuraLockerUserData @entity {
  """
  {AuraLockerAccount.id}.{Token.id}
  """
  id: ID!

  auraLockerAccount: AuraLockerAccount!

  token: Token!

  rewards: BigInt!

  rewardPerTokenPaid: BigInt!
}

type PoolAccount @entity {
  """
  {Pool.id}.{Account.id}
  """
  id: ID!

  account: Account!

  pool: Pool!

  """
  depositToken.balanceOf(account)
  """
  balance: BigInt!

  """
  rewardsPool.balanceOf(account)
  i.e. the account's staked LP tokens
  """
  staked: BigInt!

  rewards: [PoolAccountRewards!]! @derivedFrom(field: "poolAccount")
}

type PoolAccountRewards @entity {
  """
  {rewardsToken.id}.{poolAccount.id}
  """
  id: ID!

  poolAccount: PoolAccount!

  rewardToken: Token!

  """
  rewards(account)
  """
  rewards: BigInt!

  """
  userRewardPerTokenPaid(account)
  """
  rewardPerTokenPaid: BigInt!
}

type PoolRewardData implements RewardData @entity {
  """
  {pool.id}.{token.id}
  """
  id: ID!

  token: Token!

  periodFinish: Int!

  lastUpdateTime: Int!

  rewardRate: BigInt!

  rewardPerTokenStored: BigInt!

  pool: Pool!
}

type Pool @entity {
  """
  Pool ID (pid)
  """
  id: ID!

  """
  The Aura deposit token; a 1:1 token representing an LP deposit.
  - Factory pools    => an auraLP token
  - auraBAL staking  => auraBAL
  """
  depositToken: Token!

  """
  LP Token refers to:
  - Factory pools    => e.g. a given BPT
  - auraBAL staking  => BAL
  """
  lpToken: Token!

  """
  Total supply of the depositToken
  """
  totalSupply: BigInt!

  """
  Total staked in the rewardPool
  """
  totalStaked: BigInt!

  """
  BaseRewardPool (for factory pools)
  """
  rewardPool: Bytes!

  isFactoryPool: Boolean!

  factoryPoolData: FactoryPoolData

  """
  List of rewards per-token
  """
  rewardData: [PoolRewardData!]! @derivedFrom(field: "pool")

  accounts: [PoolAccount!]! @derivedFrom(field: "pool")

  """
  auraBal initial staking only
  """
  startTime: Int

  """
  Gauge associated with the pool
  """
  gauge: Gauge
}

type FactoryPoolData @entity {
  """
  {pool.id}
  """
  id: ID!

  """
  Timestamp at which the pool was added
  """
  addedAt: Int

  balancerPoolId: Bytes

  pool: Pool!

  gauge: Bytes!

  stash: Bytes!

  isShutdown: Boolean!
}

type Global @entity {
  """
  Singleton: "global"
  """
  id: ID!

  aura: Bytes!

  auraTotalSupply: BigInt!

  auraMaxSupply: BigInt!

  auraReductionPerCliff: BigInt!

  auraTotalCliffs: BigInt!

  auraMinterMinted: BigInt!

  auraMinter: Bytes!
}

type AuraLocker @entity {
  """
  Singleton: "AuraLocker"
  """
  id: ID!

  address: Bytes!

  totalSupply: BigInt!

  lockedSupply: BigInt!

  accounts: [AuraLockerAccount!]! @derivedFrom(field: "auraLocker")

  rewardData: [AuraLockerRewardData!]! @derivedFrom(field: "auraLocker")
}

type AuraLockerRewardData implements RewardData @entity {
  """
  {token.id}
  """
  id: ID!

  token: Token!

  periodFinish: Int!

  lastUpdateTime: Int!

  rewardRate: BigInt!

  rewardPerTokenStored: BigInt!

  auraLocker: AuraLocker!
}

type Token @entity {
  """
  Address
  """
  id: ID!

  decimals: Int!

  symbol: String!

  name: String!
}

type MerkleDrop @entity {
  """
  Address
  """
  id: ID!

  merkleRoot: Bytes!

  startTime: Int!

  expiryTime: Int!

  claims: [MerkleDropClaim!]! @derivedFrom(field: "merkleDrop")
}

type MerkleDropClaim @entity {
  """
  {merkleDrop.id}.{account.id}
  """
  id: ID!

  account: Account!

  merkleDrop: MerkleDrop!

  amount: BigInt!

  locked: Boolean!
}

type MasterChef @entity {
  """
  Address
  """
  id: ID!

  totalAllocPoint: BigInt!

  startBlock: BigInt!

  endBlock: BigInt!

  rewardPerBlock: BigInt!

  userInfos: [MasterChefUserInfo!]! @derivedFrom(field: "masterChef")

  poolInfos: [MasterChefPoolInfo!]! @derivedFrom(field: "masterChef")
}

type MasterChefPoolInfo @entity {
  """
  Pool ID (pid)
  """
  id: ID!

  lpToken: Token!

  allocPoint: BigInt!

  lastRewardBlock: BigInt!

  accCvxPerShare: BigInt!

  rewarder: Bytes!

  lpSupply: BigInt!

  masterChef: MasterChef!

  userInfos: [MasterChefUserInfo!]! @derivedFrom(field: "poolInfo")
}

type MasterChefUserInfo @entity {
  """
  ${poolInfo.id}.${account.id}
  """
  id: ID!

  amount: BigInt!

  rewardDebt: BigInt!

  account: Account!

  poolInfo: MasterChefPoolInfo!

  masterChef: MasterChef!
}

type Gauge @entity {
  """
  Address
  """
  id: ID!

  pool: Pool

  """
  gauge.balanceOf(auraProxy)
  """
  balance: BigInt!

  workingSupply: BigInt!

  totalSupply: BigInt!
}
