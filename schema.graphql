interface RewardData {
  token: Token!

  """
  Timestamp for current period finish
  """
  periodFinish: Int!

  """
  Last time any user took action
  """
  lastUpdateTime: Int!

  """
  RewardRate for the rest of the period
  """
  rewardRate: BigInt!

  """
  Ever increasing rewardPerToken rate, based on % of total supply
  """
  rewardPerTokenStored: BigInt!
}

type Account @entity {
  """
  Address
  """
  id: ID!

  poolAccounts: [PoolAccount!]! @derivedFrom(field: "account")

  auraLockerAccount: AuraLockerAccount
}

type AuraLockerAccount @entity {
  """
  {Account.id}
  """
  id: ID!

  account: Account!

  auraLocker: AuraLocker!

  balance: BigInt!

  """
  AuraLocker.balances(account)
  """
  balanceLocked: BigInt!
  balanceNextUnlockIndex: Int!

  """
  AuraLocker.rewardData(account)
  """
  periodFinish: Int!
  lastUpdateTime: Int!
  rewardRate: BigInt!
  rewardPerTokenPaid: BigInt!

  """
  AuraLocker.userLocks(account)
  """
  userLocks: [AuraLockerUserLock!]! @derivedFrom(field: "auraLockerAccount")

  """
  AuraLocker.userData(account)
  """
  userData: [AuraLockerUserData!]! @derivedFrom(field: "auraLockerAccount")
}

type AuraLockerUserLock @entity {
  """
  {AuraLockerAccount.id}.{index}
  """
  id: ID!

  auraLockerAccount: AuraLockerAccount!

  amount: BigInt!

  unlockTime: Int!
}

type AuraLockerUserData @entity {
  """
  {AuraLockerAccount.id}.{Token.id}
  """
  id: ID!

  auraLockerAccount: AuraLockerAccount!

  token: ID!

  rewards: BigInt!

  rewardPerTokenPaid: BigInt!
}

type PoolAccount @entity {
  """
  {Pool.id}.{Account.id}
  """
  id: ID!

  account: Account!

  pool: Pool!

  """
  balanceOf(account)
  i.e. the account's staked LP tokens
  """
  balance: BigInt!

  """
  rewards(account)
  """
  rewards: BigInt!

  """
  userRewardPerTokenPaid(account)
  """
  rewardPerTokenPaid: BigInt!
}

type PoolRewardData implements RewardData @entity {
  """
  {pool.id}.{token.id}
  """
  id: ID!

  token: Token!

  periodFinish: Int!

  lastUpdateTime: Int!

  rewardRate: BigInt!

  rewardPerTokenStored: BigInt!

  pool: Pool!
}

type Pool @entity {
  """
  Pool ID (pid)
  """
  id: ID!

  depositToken: Token!

  rewardPool: Bytes!

  totalSupply: BigInt!

  isFactoryPool: Boolean!

  factoryPoolData: FactoryPoolData

  rewardData: [PoolRewardData!]! @derivedFrom(field: "pool")

  accounts: [PoolAccount!]! @derivedFrom(field: "pool")
}

type FactoryPoolData @entity {
  """
  {pool.id}
  """
  id: ID!

  pool: Pool!

  lpToken: Token!

  gauge: Bytes!

  stash: Bytes!

  isShutdown: Boolean!
}

type AuraBalPoolData @entity {
  """
  Singleton: "auraBal"
  """
  id: ID!

  pool: Pool!

  maxSupply: BigInt!

  reductionPerCliff: BigInt!

  totalCliffs: BigInt!
}

type AuraLocker @entity {
  """
  Singleton: "AuraLocker"
  """
  id: ID!

  address: Bytes!

  accounts: [AuraLockerAccount!]! @derivedFrom(field: "auraLocker")

  rewardData: [AuraLockerRewardData!]! @derivedFrom(field: "auraLocker")
}

type AuraLockerRewardData implements RewardData @entity {
  """
  {token.id}
  """
  id: ID!

  token: Token!

  periodFinish: Int!

  lastUpdateTime: Int!

  rewardRate: BigInt!

  rewardPerTokenStored: BigInt!

  auraLocker: AuraLocker!
}

type Token @entity {
  """
  Address
  """
  id: ID!

  decimals: Int!

  symbol: String!

  name: String!
}
