specVersion: 0.0.2
schema:
  file: ./schema.graphql
dataSources:
  - kind: ethereum
    name: Booster
    network: '{{network}}'
    source:
      address: '{{Booster.address}}'
      abi: Booster
      startBlock: {{Booster.startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.5
      language: wasm/assemblyscript
      entities:
        - ArbitratorUpdated
        - Deposited
        - FactoriesUpdated
        - FeeInfoUpdated
        - FeeManagerUpdated
        - FeesUpdated
        - OwnerUpdated
        - PoolAdded
        - PoolManagerUpdated
        - PoolShutdown
        - RewardContractsUpdated
        - TreasuryUpdated
        - VoteDelegateUpdated
        - Withdrawn
      abis:
        - name: Booster
          file: ./abis/Booster.json
        - name: ERC20
          file: ./abis/ERC20.json
        - name: BaseRewardPool
          file: ./abis/BaseRewardPool.json
        - name: AuraStakingProxy
          file: ./abis/AuraStakingProxy.json
        - name: AuraToken
          file: ./abis/AuraToken.json
      eventHandlers:
        - event: ArbitratorUpdated(address)
          handler: handleArbitratorUpdated
        - event: Deposited(indexed address,indexed uint256,uint256)
          handler: handleDeposited
        - event: FactoriesUpdated(address,address,address)
          handler: handleFactoriesUpdated
        - event: FeeInfoUpdated(address,address,address)
          handler: handleFeeInfoUpdated
        - event: FeeManagerUpdated(address)
          handler: handleFeeManagerUpdated
        - event: FeesUpdated(uint256,uint256,uint256,uint256)
          handler: handleFeesUpdated
        - event: OwnerUpdated(address)
          handler: handleOwnerUpdated
        - event: PoolAdded(address,address,address,address,address,uint256)
          handler: handlePoolAdded
        - event: PoolManagerUpdated(address)
          handler: handlePoolManagerUpdated
        - event: PoolShutdown(uint256)
          handler: handlePoolShutdown
        - event: RewardContractsUpdated(address,address)
          handler: handleRewardContractsUpdated
        - event: TreasuryUpdated(address)
          handler: handleTreasuryUpdated
        - event: VoteDelegateUpdated(address)
          handler: handleVoteDelegateUpdated
        - event: Withdrawn(indexed address,indexed uint256,uint256)
          handler: handleWithdrawn
      file: ./src/mapping/Booster.ts

  # Theoretically this can change with AuraStakingProxy.setRewards,
  # but for now it's not a template because there's no way to track it
  - kind: ethereum
    name: AuraLocker
    network: '{{network}}'
    source:
      address: '{{AuraLocker.address}}'
      abi: AuraLocker
      startBlock: {{AuraLocker.startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.5
      language: wasm/assemblyscript
      entities:
        - DelegateChanged
        - DelegateCheckpointed
        - KickIncentiveSet
        - KickReward
        - OwnershipTransferred
        - Recovered
        - RewardAdded
        - RewardPaid
        - Shutdown
        - Staked
        - Withdrawn
      abis:
        - name: AuraLocker
          file: ./abis/AuraLocker.json
        - name: ERC20
          file: ./abis/ERC20.json
        - name: BaseRewardPool
          file: ./abis/BaseRewardPool.json
        - name: AuraStakingProxy
          file: ./abis/AuraStakingProxy.json
      eventHandlers:
        - event: DelegateChanged(indexed address,indexed address,indexed address)
          handler: handleDelegateChanged
        - event: DelegateCheckpointed(indexed address)
          handler: handleDelegateCheckpointed
        - event: KickIncentiveSet(uint256,uint256)
          handler: handleKickIncentiveSet
        - event: KickReward(indexed address,indexed address,uint256)
          handler: handleKickReward
        - event: OwnershipTransferred(indexed address,indexed address)
          handler: handleOwnershipTransferred
        - event: Recovered(address,uint256)
          handler: handleRecovered
        - event: RewardAdded(indexed address,uint256)
          handler: handleRewardAdded
        - event: RewardPaid(indexed address,indexed address,uint256)
          handler: handleRewardPaid
        - event: Shutdown()
          handler: handleShutdown
        - event: Staked(indexed address,uint256,uint256)
          handler: handleStaked
        - event: Withdrawn(indexed address,uint256,bool)
          handler: handleWithdrawn
      file: ./src/mapping/AuraLocker.ts

  - kind: ethereum
    name: AuraToken
    network: '{{network}}'
    source:
      address: '{{AuraToken.address}}'
      abi: AuraToken
      startBlock: {{AuraToken.startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.5
      language: wasm/assemblyscript
      entities:
        - Transfer
      abis:
        - name: AuraToken
          file: ./abis/AuraToken.json
        - name: ERC20
          file: ./abis/ERC20.json
      eventHandlers:
        - event: Transfer(indexed address,indexed address,uint256)
          handler: handleTransfer
      file: ./src/mapping/AuraToken.ts

  - kind: ethereum
    name: AuraBalRewardPool
    network: '{{network}}'
    source:
      abi: AuraBalRewardPool
      address: '{{AuraBalRewardPool.address}}'
      startBlock: {{AuraBalRewardPool.startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.5
      language: wasm/assemblyscript
      entities:
        - Staked
        - Withdrawn
        - RewardAdded
        - RewardPaid
      abis:
        - name: AuraBalRewardPool
          file: ./abis/AuraBalRewardPool.json
        - name: BaseRewardPool
          file: ./abis/BaseRewardPool.json
      eventHandlers:
        - event: Staked(indexed address,uint256)
          handler: handleStaked
        - event: Withdrawn(indexed address,uint256)
          handler: handleWithdrawn
        - event: RewardAdded(uint256)
          handler: handleRewardAdded
        - event: RewardPaid(indexed address,uint256,bool)
          handler: handleRewardPaid
      file: ./src/mapping/AuraBalRewardPool.ts


templates:
  - kind: ethereum
    name: RewardFactory
    network: '{{network}}'
    source:
      abi: RewardFactory
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.5
      language: wasm/assemblyscript
      entities:
        - AccessChanged
        - RewardPoolCreated
        - TokenRewardPoolCreated
      abis:
        - name: RewardFactory
          file: ./abis/RewardFactory.json
      eventHandlers:
        - event: AccessChanged(address,bool)
          handler: handleAccessChanged
        - event: RewardPoolCreated(address,uint256,address)
          handler: handleRewardPoolCreated
        - event: TokenRewardPoolCreated(address,address,address,address)
          handler: handleTokenRewardPoolCreated
      file: ./src/mapping/RewardFactory.ts

  - kind: ethereum
    name: BaseRewardPool
    network: '{{network}}'
    source:
      abi: BaseRewardPool
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.5
      language: wasm/assemblyscript
      entities:
        - Staked
        - Withdrawn
        - RewardAdded
        - RewardPaid
      abis:
        - name: BaseRewardPool
          file: ./abis/BaseRewardPool.json
      eventHandlers:
        - event: Staked(indexed address,uint256)
          handler: handleStaked
        - event: Withdrawn(indexed address,uint256)
          handler: handleWithdrawn
        - event: RewardAdded(uint256)
          handler: handleRewardAdded
        - event: RewardPaid(indexed address,uint256)
          handler: handleRewardPaid
      file: ./src/mapping/BaseRewardPool.ts
